#include "logging.h"
#include "arpc.h"
#include "tame_aio.h"
#include "libconfig.h++"
#include "HttpStorage.h"
#include "tame.h"
#include "tame_io.h"
#include "async.h"


using namespace std;
using namespace tame;

const unsigned int MAX_BUF = 4096;

HttpStorage::HttpStorage(log4cpp::Appender *app)
{
	LOG.setAdditivity(false);
	LOG.setAppender(app);
}

HttpStorage::~HttpStorage()
{
}

static blob make_blob(const char * str) {
	blob to_ret;
        bzero(&to_ret, sizeof(blob));
	to_ret.setsize(strlen(str));
	for(int i=0; i<strlen(str); i++) {
		to_ret[i] = str[i];
	}
	return to_ret;
}

tamed void HttpStorage::get(ID_Value key, cb_blob ret_blob) {
	tvars {
		int fd;
		strbuf data;
		int rc;
		strbuf resp;
		int line_len;
		char buff[MAX_BUF];
		strbuf output;
		const char *s_out;
		char *crlf;
		char *crlf2;
		char *content;
		blob value;
	}
	twait { tcpconnect ("localhost", 10000, mkevent(fd)); }
	if (fd >= 0) {
		LOG_WARN << "Connection succeeded!\n";
	} else {
		LOG_FATAL << "Connection failed!\n";
	}

	data << "GET /";
	data << key.toString().c_str();
	data << " HTTP/1.1\r\nHost:localhost\r\n\r\n";
	while(data.tosuio()->resid()) {
		twait { tame::waitwrite(fd, mkevent()); }
		if(data.tosuio()->output(fd) < 0) {
			LOG_FATAL << "error writing to socket\n";
		}
	}
	
	while(true) {
		twait { tame::waitread (fd, mkevent()); }
		if( (rc = resp.tosuio()->input(fd)) < 0 && errno != EAGAIN) {
			LOG_FATAL << "error reading from socket\n";
		}
		line_len = resp.tosuio()->linelen();
		while(line_len > 0) {
			if(line_len < MAX_BUF) {
				resp.tosuio()->copyout(buff, line_len);
				buff[line_len] = '\0';
				output << buff;
			} else {
				LOG_FATAL << "exceeded buffer\n";
			}
			resp.tosuio()->rembytes(line_len);
			line_len = resp.tosuio()->linelen();
		}
		s_out = str(output).cstr();
		crlf = strstr(s_out, "\r\n\r\n");
		if (crlf == NULL) {
			continue;
		}
		crlf2 = strstr(crlf + 4, "\r\n");
		if (crlf2 == NULL) {
			continue;
		}
		content = crlf2 + 2;
		crlf += 4;
		*crlf2 = '\0';
		if (strlen(content) >= atoi(crlf)) {
			content[atoi(crlf)] = '\0';
			value = make_blob(str(content));
			TRIGGER(ret_blob, New refcounted<blob>(value));
			break;
		}
	}

}

tamed void HttpStorage::set(ID_Value key, const blob* data, cbb ret_blob) {
	tvars {
		int fd;
		strbuf request;
		int rc;
		strbuf resp;
		int line_len;
		char buff[MAX_BUF];
		strbuf output;
		const char *s_out;
		char *crlf;
		const char *start;
		char *end;
	}
	twait { tcpconnect ("localhost", 10000, mkevent(fd)); }
	if (fd >= 0) {
		LOG_WARN << "Connection succeeded!\n";
	} else {
		LOG_FATAL << "Connection failed!\n";
	}
	
	start = data->base();
	end = (char *) (data->base() + data->size());
	*end = '\0';

	request << "PUT /";
	request << key.toString().c_str();
	request << " HTTP/1.1\r\nHost:localhost\r\nContent-length: ";
	request << data->size();
	request << "\r\n\r\n";
	request << start;
	while(request.tosuio()->resid()) {
		twait { tame::waitwrite(fd, mkevent()); }
		if(request.tosuio()->output(fd) < 0) {
			LOG_FATAL << "error writing to socket\n";
		}
	}
	
	while(true) {
		twait { tame::waitread (fd, mkevent()); }
		if( (rc = resp.tosuio()->input(fd)) < 0 && errno != EAGAIN) {
			LOG_FATAL << "error reading from socket\n";
		}
		line_len = resp.tosuio()->linelen();
		while(line_len > 0) {
			if(line_len < MAX_BUF) {
				resp.tosuio()->copyout(buff, line_len);
				buff[line_len] = '\0';
				output << buff;
			} else {
				LOG_FATAL << "exceeded buffer\n";
			}
			resp.tosuio()->rembytes(line_len);
			line_len = resp.tosuio()->linelen();
		}
		s_out = str(output).cstr();
		crlf = strstr(s_out, "\r\n\r\n");
		if (crlf == NULL) {
			continue;
		}
		TRIGGER(ret_blob, strstr(s_out, "HTTP/1.1 200 OK") != NULL);
		break;
		
	}
}

tamed void HttpStorage::add(ID_Value key, const blob* data, cbb ret_blob) {
	tvars {
		
		ptr<blob> get_result;
		bool set_result;
		
	}
	
	twait { get(key, mkevent(get_result)); }
	
	if (get_result == NULL) {
		twait { set(key, data, mkevent(set_result)); }
		TRIGGER(ret_blob, set_result);
	} else {
		TRIGGER(ret_blob, false);
	}
}

tamed void HttpStorage::replace(ID_Value key, const blob* data, cbb ret_blob) {
	tvars {
			
		ptr<blob> get_result;
		bool set_result;
		
	}
	
	twait { get(key, mkevent(get_result)); }
	
	if (get_result == NULL) {
		TRIGGER(ret_blob, false);
	} else {
		twait { set(key, data, mkevent(set_result)); }
		TRIGGER(ret_blob, set_result);
	}
}


tamed void HttpStorage::del(ID_Value key, cbb ret_bool) {
	tvars {
		int fd;
		strbuf request;
		int rc;
		strbuf resp;
		int line_len;
		char buff[MAX_BUF];
		strbuf output;
		const char *s_out;
		char *crlf;
	}
	twait { tcpconnect ("localhost", 10000, mkevent(fd)); }
	if (fd >= 0) {
		LOG_WARN << "Connection succeeded!\n";
	} else {
		LOG_FATAL << "Connection failed!\n";
	}

	request << "DELETE /";
	request << key.toString().c_str();
	request << " HTTP/1.1\r\nHost:localhost\r\n\r\n";
	while(request.tosuio()->resid()) {
		twait { tame::waitwrite(fd, mkevent()); }
		if(request.tosuio()->output(fd) < 0) {
			LOG_FATAL << "error writing to socket\n";
		}
	}
	
	while(true) {
		twait { tame::waitread (fd, mkevent()); }
		if( (rc = resp.tosuio()->input(fd)) < 0 && errno != EAGAIN) {
			LOG_FATAL << "error reading from socket\n";
		}
		line_len = resp.tosuio()->linelen();
		while(line_len > 0) {
			if(line_len < MAX_BUF) {
				resp.tosuio()->copyout(buff, line_len);
				buff[line_len] = '\0';
				output << buff;
			} else {
				LOG_FATAL << "exceeded buffer\n";
			}
			resp.tosuio()->rembytes(line_len);
			line_len = resp.tosuio()->linelen();
		}
		s_out = str(output).cstr();
		crlf = strstr(s_out, "\r\n\r\n");
		if (crlf == NULL) {
			continue;
		}
		TRIGGER(ret_bool, strstr(s_out, "HTTP/1.1 200 OK") != NULL);
		break;
	}
}

#ifndef MEMSTORAGE_H_
#define MEMSTORAGE_H_
#include <string>
#include <map>
#include "Storage.h"
#include "ID_Value.h"
#include "craq_rpc.h"
#include "tame.h"

using namespace std;

class MemStorage : public Storage
{
	public:
		struct mem_type {
			unsigned int len;
			unsigned char * data;
		};
		typedef map<ID_Value, mem_type>::iterator mem_it;

		MemStorage(log4cpp::Appender *app);
		virtual ~MemStorage();
		void get(ID_Value key, cb_blob, CLOSURE);
		void set(ID_Value key, const blob* data, cbb, CLOSURE);
		void add(ID_Value key, const blob* data, cbb, CLOSURE);
		void replace(ID_Value key, const blob* data, cbb, CLOSURE);
		void del(ID_Value key, cbb, CLOSURE);

	private:
		map<ID_Value, mem_type > mem_data;
};

#endif /*MEMSTORAGE_H_*/

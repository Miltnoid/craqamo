#include <map>
#include <deque>
#include <ctime>
#include <vector>
#include "sha.h"
#include "tame.h"
#include "tame_rpcserver.h"
#include "parseopt.h"
#include "arpc.h"
#include "async.h"
#include "../craq_rpc.h"
#include "../Node.h"
#include "../ID_Value.h"
#include "../connection_pool.TH"
#include <tclap/CmdLine.h>
#include "../zoo_craq.h"

using namespace CryptoPP;
using namespace std;

unsigned int MESSAGE_SIZE;
vector<string> DATA_CENTERS;
string CHAIN_NAME;
string KEY_NAME;
unsigned int CHAIN_SIZE;
unsigned int VERIFY_EVERY;
unsigned int NUM_OBJS;
ID_Value OBJ_ID;

typedef map<ID_Value, Node>::iterator ring_iter;

struct key_value {
	ID_Value chain_id;
	ID_Value id;
	blob msg;
	ring_iter head_it;
};

struct mem_type2 {
	unsigned int len;
	unsigned char * data;
};

struct key_meta2 {
	unsigned int committed;
	unsigned int max_pending;
	map<int, blob> pending_list;
	map<int, deque<svccb *> > write_reqs;
	bool is_head;
	bool is_tail;
	ID_Value chain_id;
};

map<ID_Value, Node> ring;

ring_iter ring_succ(ID_Value id) {
	ring_iter it = ring.lower_bound(id);
	if(it == ring.end())
		it = ring.begin();
	return it;
}

void ring_incr(ring_iter * it) {
	(*it)++;
	if( (*it)==ring.end() ) {
		(*it) = ring.begin();
	}
}

void ring_decr(ring_iter * it) {
	if( (*it)==ring.begin() ) {
		(*it) = ring.end();
	}
	(*it)--;
}

tamed static void write_it(const key_value * to_send, cbb cbret) {
	tvars {
		int fd, fd2, i;
		ptr<axprt_stream> x;
		ptr<aclnt> cli;
		clnt_stat e;
		rpc_node node;
		head_write_arg arg;
		u_int put_ret;
		bool ret;
		timeval started;
		timeval cur_time;
		long sec_diff;
		long usec_diff;
	}

	//gettimeofday(&started, NULL);
	//warn << "calling get_rpc_cli\n";
	//warn << "calling rpc cli for " << to_send->head_it->second.getIp().c_str() << "\n";
	twait { get_rpc_cli (to_send->head_it->second.getIp().c_str(), to_send->head_it->second.getPort(), &cli, &chain_node_1, mkevent(fd)); }
	if(fd < 0) {
		TRIGGER(cbret, false);
		return;
	}
	//warn << "success get_rpc_cli\n";
	arg.chain = to_send->chain_id.get_rpc_id();
	arg.id = to_send->id.get_rpc_id();
	arg.data = to_send->msg;
	twait {	cli->call(HEAD_WRITE, &arg, &ret,  mkevent(e)); }
	if(e || !ret) {
		fatal << "FAIL!\n";
		TRIGGER(cbret, false);
		return;
	}
	//warn << "head write success\n";

	/*gettimeofday(&cur_time, NULL);
	warn << "W\t";
	warn << cur_time.tv_sec << "\t" << cur_time.tv_usec << "\t";
	sec_diff = cur_time.tv_sec - started.tv_sec;
	if(sec_diff == 0) {
		usec_diff = cur_time.tv_usec - started.tv_usec;
	} else {
		usec_diff = (1000000 - started.tv_usec) + cur_time.tv_usec;
		sec_diff--;
		sec_diff += (usec_diff / 1000000);
		usec_diff = usec_diff % 1000000;
	}
	warn << sec_diff << "\t" << usec_diff << "\n";
	return;*/

	TRIGGER(cbret, true);

}

tamed static void read_it(key_value * to_send) {
	tvars {
		int fd, fd2, i;
		ptr<axprt_stream> x;
		ptr<aclnt> cli;
		clnt_stat e;
		rpc_node node;
		u_int put_ret;
		timeval started;
		timeval cur_time;
		long sec_diff;
		long usec_diff;
		tail_read_ex_arg arg;
		tail_read_ex_ret ret;
	}

	/*twait { get_rpc_cli (to_send->head.getIp().c_str(),to_send->head.getPort(), &cli, &chain_node_1, mkevent(fd)); }
	if(fd < 0) {
		return;
	}
	arg.id = to_send->id.get_rpc_id();
	arg.chain = to_send->chain_id.get_rpc_id();
	arg.dirty = false;
	gettimeofday(&started, NULL);
	twait {	cli->call(TAIL_READ_EX, &arg, &ret,  mkevent(e)); }
	if(e) {
		//fatal << "Read failed!\n";
		warn << "Resetting\n";
		invalidate_rpc_host(to_send->head.getIp().c_str(), to_send->head.getPort());
		return;
	} else if(ret.data.size() != MESSAGE_SIZE) {
		warn << "Bad message size\n";
		invalidate_rpc_host(to_send->head.getIp().c_str(), to_send->head.getPort());
		return;
	}

	gettimeofday(&cur_time, NULL);
	if(ret.dirty) {
		warn << "D\t";
	} else {
		warn << "R\t";
	}
	warn << cur_time.tv_sec << "\t" << cur_time.tv_usec << "\t";
	sec_diff = cur_time.tv_sec - started.tv_sec;
	if(sec_diff == 0) {
		usec_diff = cur_time.tv_usec - started.tv_usec;
	} else {
		usec_diff = (1000000 - started.tv_usec) + cur_time.tv_usec;
		sec_diff--;
		sec_diff += (usec_diff / 1000000);
		usec_diff = usec_diff % 1000000;
	}
	warn << sec_diff << "\t" << usec_diff << "\n";
	return;*/

}

ID_Value get_sha1(string msg)
{
	byte buffer[SHA::DIGESTSIZE];
	SHA().CalculateDigest(buffer, (byte *)msg.c_str(), msg.length());
	ID_Value ret(buffer);
 	return ret;
}

ID_Value get_sha1(blob msg)
{
	byte buffer[SHA::DIGESTSIZE];
	byte data[msg.size()];
	for(int i=0; i<msg.size(); i++) {
		data[i] = msg[i];
	}
	SHA().CalculateDigest(buffer, data, msg.size());
	ID_Value ret(buffer);
 	return ret;
}

double time_diff( timeval first, timeval second ) {
	double sec_diff = second.tv_sec - first.tv_sec;
	sec_diff += ((double)second.tv_usec - (double)first.tv_usec) / 1000000;
	return sec_diff;
}

tamed static void
connect_to_manager(str h, int port) {
	tvars {
		int fd;
		ptr<axprt_stream> x;
		ptr<aclnt> cli;
		clnt_stat e;
		u_int ver, i, j, k, nsent, nrecv, window_sz, num_secs;
		Node me, ret;
		rpc_node me_rpc;
		rpc_node_list cur_list;
		rpc_memb_delta delt;
		ID_Value id;
		string msg;
		map<ID_Value, Node>::iterator it;
		head_write_arg wrt_arg;
		rpc_hash rd_arg;
		bool wrt_ret;
		blob rd_ret;
		bool eqs;
		key_value key_val;
		timeval cur_time, start_time, last_time;
		rendezvous_t<u_int, ptr<bool> > rv;
		ptr<bool> res;
		double persec;
		ostringstream ss, sss;
		int num_data;
		double sum_data;
		long sec_diff;
		long usec_diff;
		u_int wait_time;
		vector<string> * node_list;
		vector<string *> node_vals;
		string find;
		string search;
		string * found;
		add_chain_arg arg;
		add_chain_ret add_ret;
		bool rc;
		Node new_node;
	}

	srand ( time(NULL) );

	ss << h << ":" << port;
	twait { czoo_init( ss.str().c_str(), mkevent(rc), ZOO_LOG_LEVEL_ERROR); }
	if(!rc) {
		fatal << "init failed!\n";
	}

	twait { czoo_get_children("/nodes/" + DATA_CENTERS[0], NULL, mkevent(node_list)); }
	if(node_list == NULL) {
		fatal << "retrieving node list failed!n";
	}

	node_vals.resize((*node_list).size());
	twait {
		for(i=0; i<(*node_list).size(); i++) {
			find = (*node_list)[i];
			search = "/nodes/" + DATA_CENTERS[0] + "/" + find;
			czoo_get(search, mkevent(node_vals[i]));
		}
	}
	//warn << "Checking node list return values... \n";
	for(i=0; i<node_vals.size(); i++) {
		if(node_vals[i] == NULL) {
			fatal << "FAIL!\n";
		}
		new_node.set_from_string(*node_vals[i]);
		//warn << "got node: " << new_node.toString().c_str() << "\n";
		ring[new_node.getId()] = new_node;
		delete node_vals[i];
	}
	delete node_list;
	//warn << "SUCCESS\n";

	srand(9);
	key_val.msg.setsize(MESSAGE_SIZE);
	for(j=0; j<MESSAGE_SIZE; j++) {
		key_val.msg[j] = rand() % 256;
	}
	key_val.id = OBJ_ID;
	key_val.chain_id = get_sha1(CHAIN_NAME);
	key_val.head_it = ring_succ(key_val.id);
	//warn << "head is: " << key_val.head_it->second.toString().c_str() << "\n";

	twait { get_rpc_cli (key_val.head_it->second.getIp().c_str(),key_val.head_it->second.getPort(), &cli, &chain_node_1, mkevent(fd)); }
	if(fd < 0) {
		fatal << "Couldn't get RPC cli for head\n";
	}

	arg.id = get_sha1(CHAIN_NAME).get_rpc_id();
	arg.chain_size = CHAIN_SIZE;
	arg.data_centers.setsize(DATA_CENTERS.size());
	for(i=0; i<DATA_CENTERS.size(); i++) {
		arg.data_centers[i] = DATA_CENTERS[i].c_str();
	}

	twait { cli->call(ADD_CHAIN, &arg, &add_ret, mkevent(e)); }
	if(e || add_ret == ADD_CHAIN_FAILURE) {
		fatal << "Error adding chain!\n";
	}
	//warn << "Finished calling ADD_CHAIN success\n";

	//warn << "head is: " << to_give->head_it->second.toString().c_str() << "\n";

	for(i=0; i<NUM_OBJS; i++) {
		if(i % VERIFY_EVERY == 0) {
			warn << "Success writing " << i << " objects so far, current is " << key_val.id.toString().c_str() << "\n";
		}
		twait { write_it(&key_val, mkevent(rc)); }
		++(key_val.id);
	}

	exit(0);

}

tamed static
void main2(int argc, char **argv) {
	tvars {
		string manager_hostname;
		int manager_port;
	}

	map<ID_Value, key_meta2> blah;
	map<ID_Value, mem_type2> blah2;

	srand(time(NULL));

	for(u_int i=0; i<1000000; i++) {
		ID_Value x;
		x.randomize();
		key_meta2 y;
		mem_type2 z;
		y.is_head = false;
		z.len = 0;
		z.data = new unsigned char[50];
		blah[x] = y;
		blah2[x] = z;
	}

	warn << blah.size() << "\n";
	warn << blah2.size() << "\n";

	while(1) {

	}
	exit(0);

	try
	{
		TCLAP::CmdLine cmd("bulk_loader loads a large amount of objects into CRAQ, reading an object back once in a while to verify", ' ', "0.1");
		TCLAP::ValueArg<string> managerHost("o", "manager_host", "Manager hostname", true, "", "string", cmd);
		TCLAP::ValueArg<int> managerPort("r", "manager_port", "Manager port number", true, 0, "int", cmd);
		TCLAP::MultiArg<string> dataCenters("d", "data_centers", "Data centers to spread the key to", true, "string", cmd );
		TCLAP::ValueArg<string> chainName("a", "chain_name", "Identifier for chain (will be converted with SHA256)", true, "", "string", cmd);
		TCLAP::ValueArg<int> keySize("s", "key_size", "Size of key data to generate", true, 0, "int", cmd);
		TCLAP::ValueArg<int> chainSize("c", "chain_size", "Size of the chains within data centers", true, 0, "int", cmd);

		TCLAP::ValueArg<string> objId("k", "object_id", "Object identifier for the first key (will be +1 for each key after that)", true, "", "string", cmd);
		TCLAP::ValueArg<int> numObjs("n", "num_objects", "Number of objects to write", true, 0, "int", cmd);
		TCLAP::ValueArg<int> verifyEvery("v", "verify_every", "How many objects to write before verifying one", true, 0, "int", cmd);

		cmd.parse(argc, argv);

		manager_hostname = managerHost.getValue();
		manager_port = managerPort.getValue();
		DATA_CENTERS = dataCenters.getValue();
		CHAIN_NAME = chainName.getValue();
		MESSAGE_SIZE = keySize.getValue();
		CHAIN_SIZE = chainSize.getValue();

		OBJ_ID.fromString(objId.getValue());
		NUM_OBJS = numObjs.getValue();
		VERIFY_EVERY = verifyEvery.getValue();

		connect_to_manager(manager_hostname.c_str(), manager_port);
	}
	catch (TCLAP::ArgException &e)  // catch any exceptions
	{
		fatal << "error: " << e.error().c_str() << " for arg " << e.argId().c_str() << "\n";
	}

}

int main (int argc, char *argv[]) {
	main2(argc, argv);
	amain ();
}
